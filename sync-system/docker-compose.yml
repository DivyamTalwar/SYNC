# ============================================================================
# SYNC SYSTEM - PRODUCTION DOCKER COMPOSE
# Complete stack with API, Redis, PostgreSQL, and monitoring
# ============================================================================

version: '3.8'

services:
  # ============================================================================
  # SYNC API Service
  # ============================================================================
  sync-api:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: sync-api
    restart: unless-stopped
    ports:
      - "8000:8000"
    environment:
      # API Configuration
      - SYNC_ENV=production
      - API_HOST=0.0.0.0
      - API_PORT=8000
      - API_WORKERS=4

      # LLM API Keys (set these in .env file)
      - OPENROUTER_API_KEY=${OPENROUTER_API_KEY}
      - COHERE_API_KEY=${COHERE_API_KEY}

      # Redis Configuration
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD:-syncredis2024}

      # PostgreSQL Configuration
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - POSTGRES_DB=${POSTGRES_DB:-sync_db}
      - POSTGRES_USER=${POSTGRES_USER:-syncuser}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-syncpass2024}

      # System Configuration
      - MAX_AGENTS=10
      - MAX_ROUNDS=20
      - DEFAULT_TIMEOUT=300

      # Logging
      - LOG_LEVEL=INFO
      - LOG_FORMAT=json

    volumes:
      # Persistent storage for checkpoints and results
      - sync-checkpoints:/app/checkpoints
      - sync-results:/app/results
      - sync-logs:/app/logs

    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy

    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/v1/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

    networks:
      - sync-network

  # ============================================================================
  # Redis Cache Service
  # ============================================================================
  redis:
    image: redis:7-alpine
    container_name: sync-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    command: >
      redis-server
      --requirepass ${REDIS_PASSWORD:-syncredis2024}
      --maxmemory 2gb
      --maxmemory-policy allkeys-lru
      --appendonly yes
    volumes:
      - sync-redis-data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - sync-network

  # ============================================================================
  # PostgreSQL Database Service
  # ============================================================================
  postgres:
    image: postgres:15-alpine
    container_name: sync-postgres
    restart: unless-stopped
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=${POSTGRES_DB:-sync_db}
      - POSTGRES_USER=${POSTGRES_USER:-syncuser}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-syncpass2024}
      - PGDATA=/var/lib/postgresql/data/pgdata
    volumes:
      - sync-postgres-data:/var/lib/postgresql/data
      - ./scripts/init_db.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-syncuser}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - sync-network

  # ============================================================================
  # Nginx Reverse Proxy (Optional - for production)
  # ============================================================================
  nginx:
    image: nginx:alpine
    container_name: sync-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - sync-logs:/var/log/nginx
    depends_on:
      - sync-api
    networks:
      - sync-network
    profiles:
      - production

# ============================================================================
# Volumes
# ============================================================================
volumes:
  sync-checkpoints:
    driver: local
  sync-results:
    driver: local
  sync-logs:
    driver: local
  sync-redis-data:
    driver: local
  sync-postgres-data:
    driver: local

# ============================================================================
# Networks
# ============================================================================
networks:
  sync-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
